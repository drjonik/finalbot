from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
import pytz

from db.database import get_pending_tasks, get_task, remove_task

class Scheduler:
    def __init__(self, bot):
        self.bot = bot
        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        self.sched = AsyncIOScheduler(timezone="Europe/Amsterdam")
        self.sched.start()

    async def load_jobs(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        pending = await get_pending_tasks()
        for t in pending:
            # —Å–æ–∑–¥–∞—ë–º —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è
            trigger = DateTrigger(
                run_date=t.date_time,
                timezone=pytz.timezone("Europe/Amsterdam")
            )
            # job_id –Ω–∞ —É—Ä–æ–≤–Ω–µ APScheduler –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å t.id, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å
            self.sched.add_job(self.send_reminder, trigger, args=[t.id], id=str(t.id))

    async def send_reminder(self, task_id: int):
        # –¥–æ—Å—Ç–∞—ë–º –∑–∞–¥–∞—á—É –ø–æ id
        task = await get_task(task_id)
        if not task or task.done:
            return
        # —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await self.bot.send_message(task.user_id, f"üîî {task.text}")
        # –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –æ—Ç–º–µ—á–∞–µ–º –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
        if not task.repeat:
            await remove_task(task.user_id, task.text)
