from aiogram import Router, types
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from pydantic import BaseModel, ValidationError
from utils.parser import parse_natural
from db.database import add_task, get_user_tasks
from utils.lang import I18n, _

router = Router()

class TaskIn(BaseModel):
    text: str
    date_time: str  # will be parsed again
    repeat: str | None = None

class AddTask(StatesGroup):
    waiting_for_input = State()

@router.callback_query(Text('add'))
async def callback_add(call: types.CallbackQuery, state: FSMContext):
    user_lang = I18n.get_user_lang(call.from_user.id)
    await call.message.answer(
        _('‚úçÔ∏è –ù–∞–ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:', user_lang) + "\n"
        + _('–ü—Ä–∏–º–µ—Ä: –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00 —Å–ø–æ—Ä—Ç–∑–∞–ª', user_lang)
    )
    await state.set_state(AddTask.waiting_for_input)
    await call.answer()

@router.message(AddTask.waiting_for_input)
async def process_task_input(message: types.Message, state: FSMContext):
    user_lang = I18n.get_user_lang(message.from_user.id)
    try:
        parsed = parse_natural(message.text, user_lang)
    except Exception:
        await message.answer(_('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å.', user_lang))
        await state.clear()
        return
    try:
        task = await add_task(message.from_user.id, parsed)
    except ValidationError:
        await message.answer(_('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.', user_lang))
        await state.clear()
        return
    await message.answer(_(f'–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task.text}', user_lang))
    await state.clear()

@router.callback_query(Text('view'))
async def callback_view(call: types.CallbackQuery):
    user_lang = I18n.get_user_lang(call.from_user.id)
    tasks = await get_user_tasks(call.from_user.id)
    if not tasks:
        await call.message.answer(_('üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.', user_lang))
    else:
        lines = []
        for i, t in enumerate(tasks, 1):
            lines.append(f"{i}. {t.text} ‚Äî {t.date_time.strftime('%Y-%m-%d %H:%M')}")
        await call.message.answer('\n'.join(lines))
    await call.answer()

@router.callback_query(Text('settings'))
async def callback_settings(call: types.CallbackQuery):
    user_lang = I18n.get_user_lang(call.from_user.id)
    await call.message.answer(_('‚öôÔ∏è –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', user_lang))
    await call.answer()

@router.message(Command(commands=['cancel', '–û—Ç–º–µ–Ω–∏']))
async def cancel_task(message: types.Message):
    user_lang = I18n.get_user_lang(message.from_user.id)
    success = await remove_task(message.from_user.id, message.text)
    if success:
        await message.answer(_('–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', user_lang))
    else:
        await message.answer(_('–°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', user_lang))

# Registration

def register(dp):
    dp.include_router(router)
